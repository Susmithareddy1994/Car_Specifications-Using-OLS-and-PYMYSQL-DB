# -*- coding: utf-8 -*-
"""Model_Cars_specifications using OLS and pymysql.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wZu0lOejHIuZDGBeFKxyDQTnGYLVd4Q0
"""

import pymysql
import pandas as pd
import matplotlib.pyplot as plt

import pymysql

ENDPOINT = '127.0.0.1'
PORT = 3306
USERNAME = 'root'
DBNAME = 'auto_mpg'
PASSWORD = '3178' 
CURSORCLASS = pymysql.cursors.DictCursor

# Define function to establish MySQL database (local) connection
def initiate_local_connection():
    try:
        connection = pymysql.connect(host=ENDPOINT,
                                     port=PORT,
                                     user=USERNAME,
                                     passwd=PASSWORD,
                                     db=DBNAME,
                                     cursorclass=CURSORCLASS)
        print('[+] Local Connection Successful')
    except Exception as e:
        print(f'[+] Local Connection Failed: {e}')
        connection = None

    return connection

connection = initiate_local_connection()

# Define SQL query
query = f'SELECT * FROM mpg;'

def get_records(sql_query):
    try:
        with connection.cursor() as cursor:
            cursor.execute(sql_query)

        # Connection is not autocommit by default, so we must commit to save changes
        connection.commit()
        
        # Fetch all the records from SQL query output
        results = cursor.fetchall()
        
        # Convert results into pandas dataframe
        df = pd.DataFrame(results)
        
        print(f'Successfully retrieved records')
        
        return df
        
    except Exception as e:
        print(f'Error encountered: {e}')

df=get_records(query)
df

import statsmodels as st
import seaborn as sns
df.corr()

sns.heatmap(data=df.corr(), annot=True , cmap="coolwarm");

# From the above heatmap we can see that acceleration column is missing because the data type of the feature is float
# weight and displacement are negatively highly correlated with mpg

sns.pairplot(df[["mpg","cylinders","displacement","horsepower","weight","model year","origin"]])

# calculating correlation coefficient between mpg and cylinders
import numpy as np
r1=np.corrcoef(df['mpg'], df['cylinders'])
r1

# calculating correlation coefficient between mpg and displacement
r2=np.corrcoef(df['mpg'], df['displacement'])
r2

# calculating correlation coefficient between mpg and horsepower
r3=np.corrcoef(df['mpg'], df['horsepower'])
r3

# calculating correlation coefficient between mpg and weight
r4=np.corrcoef(df['mpg'], df['weight'])
r4

# calculating correlation coefficient between mpg and model year
r5=np.corrcoef(df['mpg'], df['model year'])
r5

# calculating correlation coefficient between mpg and origin
r6=np.corrcoef(df['mpg'], df['origin'])
r6

import statsmodels.api as sm

X = df['weight']
y = df['mpg']

x = sm.add_constant(X)
#print(X)

model = sm.OLS(y, x).fit()
predictions = model.predict(x) 

print_model = model.summary()
print(print_model)

plt.figure(figsize = (8, 6))
plt.scatter(X, y, label = "data")
plt.plot(X,predictions,color="red", label ="regression line")
plt.xlabel("weight", fontsize = 15)
plt.ylabel("mpg", fontsize = 15)
plt.legend(fontsize=15);

# Regression equation
print(f"equation is mpg = -0.0076*weight")

# Using 2 highly correlated variables with mpg using scikit-learn

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import seaborn as sns

data = df[["weight","displacement"]]
data.head()

data.describe()

sns.pairplot(data)

data.cov()

corr_matrix = np.round(data.corr(), 2)
corr_matrix
sns.heatmap(data=corr_matrix, annot=True, cmap="coolwarm");

X = df[["weight","displacement"]]
y = df['mpg']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

lin_reg = LinearRegression()

lin_reg.fit(X_train, y_train)

w = lin_reg.coef_
b = lin_reg.intercept_
w, b

print(f"The linear regression model based on the training data is \n")
print(f"predicted_sales = {np.round(w[0],3)} * weight+ {np.round(w[1],3)} *displacement + {np.round(b,3)}")

mse_train = mean_squared_error(y_train, lin_reg.predict(X_train))
mse_test = mean_squared_error(y_test, lin_reg.predict(X_test))

print(f"RMSE on the training data: {np.sqrt(mse_train)}\n")
print(f"RMSE on the test data: {np.sqrt(mse_test)}")

# Using 2 highly correlated variables with mpg using statsmodels

data = df[["weight","displacement"]]
data.head()

x = sm.add_constant(data)

model = sm.OLS(y, x).fit()
predictions = model.predict(x) 

print_model = model.summary()
print(print_model)

#Regression Line
print(f" The equation is mpg = -0.0058*weight+ (-0.0164)*displacemnet")

